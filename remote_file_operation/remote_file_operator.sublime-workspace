{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"WA",
				"SEND_WAIT"
			],
			[
				"rand",
				"randint"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/python\n#-*-coding:utf-8-*-\n\n\"\"\"\n *  Description: 建立一个sqllite的本地数据，用于维护系统资源及状态\n *  Author:savion\n *  Date: 2015-04-20\n\"\"\"\n\nimport os, sqlite3\nimport config\nfrom utils import Log as \n\nclass DataBase:\n\n    def __init__(self, path):\n        conn = sqlite3.connect(path,check_same_thread = False)\n        if os.path.exists(path) and os.path.isfile(path):\n            self.conn = conn\n        else:\n            Log.error('Create sqlite3 file fail. use memory!')\n            self.conn = sqlite3.connect(':memory:')\n\n    def get_cursor(self):\n        if self.conn is not None:\n            return self.conn.cursor()\n\n    def close(self):\n        if self.conn is not None:\n            self.conn.close()\n\n    def execute(self, sql, data=None):\n        Log.debug('execute :' + sql)\n        try:\n            cu = self.get_cursor()\n            if data:\n                for dt in data:\n                    cu.execute(sql, dt)\n                    self.conn.commit()\n            else:\n                cu.execute(sql)\n                self.conn.commit()\n        except Exception, e:\n            Log.error('execute error:' + str(e))\n        finally:\n            cu.close()\n\n    def fetch(self, sql, data=None):\n        rows = []\n        Log.debug('fetch :' + sql)\n        try:\n            cu = self.get_cursor()\n            if data:\n                cu.execute(sql, data)\n            else:\n                cu.execute(sql)\n            rows = cu.fetchall()\n        except Exception, e:\n            Log.error('fetch error:' + str(e))\n        finally:\n            cu.close()\n        if rows is not None and len(rows) > 0:\n            return rows[0][0]\n        else:\n            return None\n\nclass DBOperate:\n\n    def __init__(self):\n        self.operate = DataBase(config.DB_FILE_PATH)\n        self.create_table()\n\n    def __del__(self):\n        self.operate.close()\n\n    def create_table(self):\n        profile = '''CREATE TABLE IF NOT EXISTS `profile` (\n                  `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n                  `host_ip` varchar(32) NOT NULL,\n                  `user_name` varchar(32) NOT NULL,\n                  `user_dir` varchar(256) NOT NULL\n                )'''\n        self.operate.execute(profile)\n\n        detail = '''CREATE TABLE IF NOT EXISTS `detail` (\n                  `id` INTEGER PRIMARY KEY AUTOINCREMENT,\n                  `host_ip` varchar(32) NOT NULL,\n                  `user_name` varchar(32) NOT NULL,\n                  `file` varchar(64) NOT NULL,\n                  `check_code` varchar(64) NOT NULL\n                )'''\n        self.operate.execute(detail)\n\n    def drop_table(self):\n        drop_sql = 'DROP TABLE IF EXISTS profile'\n        self.operate.execute(drop_sql)\n        drop_sql = 'DROP TABLE IF EXISTS detail'\n        self.operate.execute(drop_sql)\n\n\n    def query_user_dir(self, host_ip, user_name):\n        query = '''SELECT user_dir FROM profile WHERE host_ip='%s' \\\n              AND user_name='%s' ''' % (host_ip, user_name)\n        return self.operate.fetch(query)\n\n    def update_user_dir(self, host_ip, user_name, user_dir):\n        add_sql = \"\"\n        if self.query_user_dir(host_ip, user_name):\n            add_sql = '''UPDATE profile SET user_dir='%s' WHERE  host_ip='%s' \\\n                 AND user_name='%s' ''' % (user_dir, host_ip, user_name)\n        else:\n            add_sql = '''INSERT INTO  profile (host_ip, user_name, user_dir) \\\n             VALUES ('%s', '%s', '%s') ''' % (host_ip, user_name, user_dir)\n        self.operate.execute(add_sql)\n\n    def delete_dir(self, host_ip, user_name):\n        del_sql = '''DELETE FROM profile WHERE  host_ip='%s' \\\n                 AND user_name='%s' ''' % (host_ip, user_name)\n        self.operate.execute(del_sql)\n\n\n    def query_check_code(self, host_ip, user_name, file):\n        query = '''SELECT check_code FROM detail WHERE host_ip='%s' \\\n            AND user_name='%s' AND file='%s' ''' % (host_ip, user_name, file)\n        return self.operate.fetch(query)\n\n    def update_check_code(self, host_ip, user_name, file, check_code):\n        add_sql = \"\"\n        if self.query_check_code(host_ip, user_name, file):\n            add_sql = '''UPDATE detail SET check_code='%s' WHERE  host_ip='%s' \\\n            AND user_name='%s' AND file='%s' ''' % (check_code, host_ip, user_name, file)\n        else:\n            add_sql = '''INSERT INTO  detail (host_ip, user_name, file, check_code) \\\n            VALUES ('%s', '%s', '%s', '%s') ''' % (host_ip, user_name, file, check_code)\n        self.operate.execute(add_sql)\n\n    def delete_file(self, host_ip, user_name, file):\n        del_sql = '''DELETE FROM detail WHERE  host_ip='%s' \\\n            AND user_name='%s' AND file='%s' ''' % (host_ip, user_name, file)\n        self.operate.execute(del_sql)\n\n\n",
			"file": "state_info.py",
			"file_size": 4791,
			"file_write_time": 1447398724000000,
			"settings":
			{
				"buffer_size": 4754,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/python\n# -*-coding:utf-8-*-\n\nimport config\nimport socket, struct, fcntl\nimport threading\n\n\n\ndef get_local_ip(ethname=config.NETWORK_CARD):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    return socket.inet_ntoa(fcntl.ioctl(sock.fileno(), 0X8915, struct.pack('256s', ethname[:15]))[20:24])\nif __name__ == '__main__':\n    print get_local_ip('eth0')\n",
			"file": "utils_comm.py",
			"file_size": 576,
			"file_write_time": 1447398721000000,
			"settings":
			{
				"buffer_size": 374,
				"line_ending": "Unix"
			}
		},
		{
			"file": "utils.py",
			"settings":
			{
				"buffer_size": 4648,
				"line_ending": "Unix"
			}
		},
		{
			"file": "remote_file_operation.py",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "config.py",
			"settings":
			{
				"buffer_size": 625,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 52.0,
		"selected_items":
		[
			[
				"python lint",
				"User: Python Flake8 Lint"
			],
			[
				"lint",
				"User: Jump to next Flake8 Lint error"
			],
			[
				"pythonlin",
				"User: Python Flake8 Lint"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/rss/Git/reserve/remote_file_operation/remote_file_operator.sublime-project",
		"/home/rss/Git/reserve/remote_file_operation/remote_file_operator.sublime-workspace",
		"/home/rss/Git/reserve/remote_file_operation/log.py",
		"/home/rss/nrss/rss/src/rss/rss_agent/rss/test/py_agent.cpp",
		"/home/rss/Git/ProjectNotes/agent_py_libc.txt",
		"/home/rss/Git/reserve/js/lengthoflis.js",
		"/home/rss/nrss/rss/src/rss/rss_agent/rss/agent/agent.py",
		"/home/rss/nrss/rss/src/rss/rss_agent/rss/agent/log.py",
		"/home/rss/sh/as.sh",
		"/home/rss/nrss/rss/src/rss/rss_agent/rss/agent/agent",
		"/home/rss/bash/forouput.sh",
		"/home/rss/online/python-morphology.notes",
		"/home/rss/sound.txt",
		"/home/rss/Git/reserve/get_datatables.py",
		"/home/rss/workspace/codeblocks/binarypath/main.c",
		"/home/rss/workspace/codeblocks/binarypath/binary_tree_path.c",
		"/home/rss/bash/output.txt",
		"/home/rss/Git/reserve/operation-monitor.js",
		"/home/rss/bash/ifs.sh",
		"/home/rss/.bashrc",
		"/home/rss/online/Codes/funsort.cpp",
		"/usr/share/applications/sublime.desktop",
		"/home/rss/Git/reserve/quote_info.js",
		"/home/rss/Documents/aaaa.epf",
		"/home/rss/workspace/websocket/vistor.html",
		"/home/rss/workspace/websocket/server.py",
		"/home/rss/workspace/websocket/py3.py",
		"/home/rss/bash/lettbash.sh",
		"/home/rss/Notes/socket.note",
		"/home/rss/workspace/socket/server.c",
		"/home/rss/Downloads/server.c",
		"/home/rss/workspace/socket/client.c",
		"/home/rss/workspace/mytest/ex01.py",
		"/home/rss/workspace/mytest/test.html",
		"/home/rss/Python/threadingzip",
		"/home/rss/workspace/codeblocks/server.c",
		"/home/rss/workspace/codeblocks/client.c",
		"/home/rss/.ssh/id_rsa.pub",
		"/home/rss/workspace/socket/client",
		"/home/rss/Python/ex6.py",
		"/home/rss/workspace/websocket/py2.py",
		"/home/rss/workspace/websocket/py1.py",
		"/home/rss/nrss/rss/src/rss/web/rtserver/handlers/result.py",
		"/home/rss/nrss/rss/src/rss/web/rtserver/service/result.py",
		"/home/rss/nrss/rss/src/rss/web/rtserver/config.py",
		"/home/rss/rss/trader/src/rss/web/site/core/static/platform/css/main.css",
		"/home/rss/rss/trader/src/rss/web/site/operation/templates/monitor.html",
		"/home/rss/rss/trader/src/rss/web/rtserver/mock_test.py",
		"/home/rss/rss/trader/src/rss/web/site/core/static/platform/js/operation-manage.js",
		"/home/rss/rss/trader/src/rss/web/site/core/static/platform/js/operation-monitor.js",
		"/home/rss/nrss/rss/src/rss/web/rtserver/mock_test.py",
		"/home/rss/Notes/linux.notes",
		"/home/rss/Notes/bash.notes",
		"/home/rss/workspace/myweb/myweb/settings.py",
		"/home/rss/workspace/myweb/myweb/urls.py",
		"/home/rss/nrss/rss/src/rss/web/commdefs/config.py",
		"/home/rss/nrss/rss/src/rss/web/commdefs/config.pyc",
		"/home/rss/nrss/rss/src/rss/web/site/RSS/settings.py",
		"/home/rss/rss/trader/src/rss/web/rtserver/service/result.py",
		"/home/rss/rss/trader/src/rss/web/rtserver/handlers/result.py",
		"/home/rss/rss/trader/src/rss/web/site/RSS/settings.py",
		"/home/rss/rss/trader/src/rss/web/rtserver/config.py",
		"/home/rss/Notes/UEFI.notes",
		"/home/rss/Notes/gdb vs mrb.notes",
		"/home/rss/Notes/MRB.notes",
		"/home/rss/Notes/MRB",
		"/home/rss/Notes/dual system(linux & windows).notes",
		"/home/rss/rss/trader/src/rss/web/site/core/static/platform/js/common/util.js",
		"/home/rss/rss/trader/src/rss/web/site/core/static/platform/js/trading-manage.js",
		"/home/rss/rss/trader/src/rss/web/site/operation/views.py",
		"/home/rss/rss/trader/src/rss/web/site/trading/templates/trading.html",
		"/home/rss/rss/trader/src/rss/web/site/operation/templates/realmonitor.html",
		"/home/rss/Documents/warningSound.html",
		"/home/rss/rss/trader/src/rss/web/site/core/templates/leftside.html",
		"/home/rss/one/trader/src/rss/web/site/accounts/templates/admin/login.html",
		"/home/rss/one/trader/src/rss/web/site/accounts/views.py",
		"/home/rss/one/trader/src/rss/web/site/accounts/urls.py",
		"/home/rss/Notes/Update captcha library.notes",
		"/home/rss/one/trader/src/rss/web/site/core/static/platform/css/login.css",
		"/home/rss/one/trader/src/rss/web/site/RSS/settings.py",
		"/home/rss/workspace/mytest/auth.json",
		"/home/rss/workspace/mytest/tools/forms.py",
		"/home/rss/workspace/mytest/mytest/urls.py",
		"/home/rss/workspace/mytest/tools/views.py",
		"/home/rss/workspace/mytest/tools/templates/index.html",
		"/home/rss/workspace/mytest/blog/models.py",
		"/home/rss/workspace/mytest/learn/models.py",
		"/home/rss/workspace/mytest/blog/admin.py",
		"/home/rss/workspace/mytest/mytest/settings.py",
		"/home/rss/workspace/mytest/learn/templates/index.html",
		"/home/rss/workspace/mytest/learn/views.py",
		"/home/rss/workspace/mytest/learn/myfield.py",
		"/home/rss/workspace/mytest/learn/templates/home.html",
		"/home/rss/colin/mysite/polls/templates/polls/detail.html",
		"/home/rss/rss/trader/src/rss/web/site/trading/views.py",
		"/home/rss/colin/mysite/polls/views.py",
		"/home/rss/colin/mysite/mysite/settings.py",
		"/home/rss/rss/trader/src/rss/web/site/core/static/platform/js/trading_market_data.js",
		"/home/rss/rss/trader/src/rss/web/site/core/templates/mycapbase.html",
		"/home/rss/rss/trader/src/rss/web/site/trading/templates/market_data.html",
		"/home/rss/notes/python.notes",
		"/home/rss/Notes/python.notes",
		"/home/rss/Python/pool.py",
		"/home/rss/Python/gui.py",
		"/home/rss/Python/fork.py",
		"/home/rss/Python/err3.py",
		"/home/rss/Python/mydict_test.py",
		"/home/rss/Python/mydict.py",
		"/home/rss/notes/updown.py",
		"/home/rss/Python/err2.py",
		"/home/rss/Python/err1.py",
		"/home/rss/Python/err.py",
		"/home/rss/Python/try1.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"os",
			"sys",
			"ObjectFromDict",
			"Convert",
			"echo here",
			"#",
			"\n*/",
			"#include <math.h>\n#include <string.h>",
			"zjava",
			"myset",
			"return 1",
			"AF_PACKET",
			"updateDataTable",
			"RTCilen",
			"	",
			">';\n",
			"first"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"return -1",
			"  "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "state_info.py",
					"settings":
					{
						"buffer_size": 4754,
						"regions":
						{
						},
						"selection":
						[
							[
								93,
								93
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "utils_comm.py",
					"settings":
					{
						"buffer_size": 374,
						"regions":
						{
						},
						"selection":
						[
							[
								101,
								101
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "utils.py",
					"settings":
					{
						"buffer_size": 4648,
						"regions":
						{
						},
						"selection":
						[
							[
								2463,
								2463
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "remote_file_operation.py",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "config.py",
					"settings":
					{
						"buffer_size": 625,
						"regions":
						{
						},
						"selection":
						[
							[
								192,
								192
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
